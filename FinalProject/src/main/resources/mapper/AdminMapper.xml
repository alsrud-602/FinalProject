<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.admin.mapper.AdminMapper">  


<!--         /Admin/User         -->
<!-- 전체 유저 정보 가져오기  -->
<select id="getalluserinfo">
 SELECT
    USER_IDX,
    NIKNAME,
    ID,
    PASSWORD,
    EMAIL,
    BIRTHDATE,
    PHONE,
    COMPULSORY_AGREEMENT,
    INFO_AGREEMENT,
    MESSAGE_AGREEMENT,
    MARKETING_AGREEMENT,
    ALERT_AGREEMENT,
    TO_CHAR(CDATE,'YYYY-MM-DD') AS CDATE,
    STATUS,
    ENABLED,
    NAME,
    ROLE,
    SOCIAL_ID,
    SOCIAL_TYPE
FROM
    USERS
    ORDER BY
        NIKNAME DESC 
</select>


<update id="PlusPopcorns">
    UPDATE POPCORN_WALLET
    SET TOTAL_POINTS = TOTAL_POINTS + #{points, jdbcType=INTEGER}
    WHERE USER_ID IN 
    <foreach collection="users" item="user" open="(" close=")" separator=",">
        #{user, jdbcType=VARCHAR}  <!-- 또는 적절한 타입 지정 -->
    </foreach>
</update>


<insert id="PopcornPlusLogs">
 INSERT INTO POPCORN_LOG (
        LOG_ID,
        USER_ID,
        CONTENT,
        CONTENT_INFO,
        EARNED_POINTS,
        TOTAL_POINTS,
        ADD_DATE
    ) 
    VALUES (
        (SELECT NVL(MAX(LOG_ID), 0) + 1 FROM POPCORN_LOG),
        #{arg2, jdbcType=VARCHAR},
        #{arg0, jdbcType=VARCHAR},
        '지급',
        #{arg1, jdbcType=INTEGER},
        (SELECT TOTAL_POINTS + #{arg1, jdbcType=INTEGER} FROM POPCORN_WALLET WHERE USER_ID = #{arg2, jdbcType=VARCHAR}),
        SYSDATE
    )
</insert>


<!-- 팝콘 차감 처리 -->
<insert id="PopcornMinusLogs">
    INSERT INTO POPCORN_LOG (
        LOG_ID,
        USER_ID,
        CONTENT,
        CONTENT_INFO,
        SPENT_POINTS,
        TOTAL_POINTS,
        ADD_DATE
    ) 
    VALUES (
        (SELECT NVL(MAX(LOG_ID), 0) + 1 FROM POPCORN_LOG),
        #{arg2, jdbcType=VARCHAR},  <!-- 사용자 ID -->
        #{arg0, jdbcType=VARCHAR},  <!-- 차감 내용 -->
        '사용',
        #{arg1, jdbcType=INTEGER}, <!-- 차감된 포인트 -->
        (SELECT TOTAL_POINTS - #{arg1, jdbcType=INTEGER} FROM POPCORN_WALLET WHERE USER_ID = #{arg2, jdbcType=VARCHAR}),
        SYSDATE
    )
</insert>

<!-- 팝콘 차감 -->
<update id="MinusPopcorns">
    UPDATE POPCORN_WALLET
    SET TOTAL_POINTS = TOTAL_POINTS - #{points, jdbcType=INTEGER}
    WHERE USER_ID IN 
    <foreach collection="users" item="user" open="(" close=")" separator=",">
        #{user, jdbcType=VARCHAR}  <!-- 사용자 ID -->
    </foreach>
</update>


<!-- 유저 등급 바꾸기 -->
<update id="updateUserStatus">
 UPDATE USERS
 SET STATUS = #{status}
 WHERE USER_ID = #{userId}

</update>


<!--         /Admin/User  끝        -->



<!--         /Admin/Userdetail          -->

<!-- 유저IDX 가져오기  -->
<select id="getUserIdx">
SELECT USER_IDX
FROM USERS
WHERE ID =#{userID}

</select>
<!-- 모든 리뷰 가져오기  -->
<select id="getallReview">
SELECT * FROM REVIEWS
</select>
<!-- 유저 리뷰 가져오기  -->
<select id="getUserReview">
SELECT *
FROM REVIEWS
WHERE USER_IDX = #{selUserId}
</select>

<!-- 유저 정보 가져오기  -->
<select id="getUserinfo">
 SELECT
    USER_IDX,
    NIKNAME,
    ID,
    PASSWORD,
    EMAIL,
    BIRTHDATE,
    PHONE,
    COMPULSORY_AGREEMENT,
    INFO_AGREEMENT,
    MESSAGE_AGREEMENT,
    MARKETING_AGREEMENT,
    ALERT_AGREEMENT,
    TO_CHAR(CDATE,'YYYY-MM-DD') AS CDATE,
    STATUS,
    ENABLED,
    NAME,
    ROLE,
    SOCIAL_ID,
    SOCIAL_TYPE
FROM
    USERS
WHERE
	ID = #{userId}
</select>

<!-- 유저 총 팝콘량   -->
<select id="getTotalPopcorn">
SELECT TOTAL_POINTS
 FROM POPCORN_WALLET
 WHERE USER_ID = #{userId}
  
</select>


<!-- 유저 팝콘 내역   -->
<select id="getPopcornLogByUserId" resultType="com.board.users.vo.PopcornVo">
SELECT 
    LOG_ID, 
    USER_ID, 
    CONTENT, 
    CONTENT_INFO, 
    EARNED_POINTS, 
    SPENT_POINTS,
    TOTAL_POINTS, 
    ADD_DATE
  FROM FINAL.POPCORN_LOG
  WHERE USER_ID = #{userId}
  ORDER BY ADD_DATE DESC
</select>

<!-- 유저 팝콘  총 지급 량   -->
<select id="getPopcornEarnLogByUserId" >
SELECT 
   NVL(SUM(EARNED_POINTS), 0) AS TOTAL_SPENT_POINTS
  FROM FINAL.POPCORN_LOG
  WHERE USER_ID = #{userId}
</select>

<!-- 유저 팝콘 총 사용 량   -->
<select id="getPopcornSpentedLogByUserId" >
SELECT 
  NVL(SUM(SPENT_POINTS), 0) AS TOTAL_SPENT_POINTS
  FROM FINAL.POPCORN_LOG
  WHERE USER_ID = #{userId}
</select>

<!--  선택 유저 팝콘 지급 -->
<insert id="PopcornPlusLogByUserId" >
INSERT INTO POPCORN_LOG (
    LOG_ID,
    USER_ID,
    CONTENT,
    CONTENT_INFO,
    EARNED_POINTS,
    TOTAL_POINTS,
    ADD_DATE
) VALUES (
 (SELECT NVL(MAX(LOG_ID),0)+1 FROM POPCORN_LOG),
 #{arg0},
 #{arg1},
 '지급',
 #{arg2},
 (SELECT TOTAL_POINTS + #{arg2} FROM POPCORN_WALLET WHERE USER_ID = #{arg0}), 
 SYSDATE
)
</insert>

<!--  선택 유저 팝콘 차감 -->
<insert id="PopcornMinusLogByUserId" >
INSERT INTO POPCORN_LOG (
    LOG_ID,
    USER_ID,
    CONTENT,
    CONTENT_INFO,
    SPENT_POINTS,
    TOTAL_POINTS,
    ADD_DATE
) VALUES (
 (SELECT NVL(MAX(LOG_ID),0)+1 FROM POPCORN_LOG),
 #{arg0},
 #{arg1},
 '사용',
 #{arg2},
 (SELECT TOTAL_POINTS - #{arg2} FROM POPCORN_WALLET WHERE USER_ID = #{arg0}), 
 SYSDATE
)
</insert>

<!--  선택 유저 팝콘 지급 내역 추가 -->
<update id="PopcornPlusWalletByUserId">
	UPDATE POPCORN_WALLET
SET
        TOTAL_POINTS = TOTAL_POINTS + #{arg1}
WHERE
        USER_ID = #{arg0}
</update>

<!--  선택 유저 팝콘 차감 내역 추가 -->
<update id="PopcornMinusWalletByUserId">
	UPDATE POPCORN_WALLET
SET
        TOTAL_POINTS = TOTAL_POINTS - #{arg1}
WHERE
        USER_ID = #{arg0}
</update>

<!--         /Admin/Userdetail    끝      -->

    <!-- 총 가입자 수 -->
    <select id="getTotalUsers">
        SELECT COUNT(*) FROM COMPANYS
    </select>

    <select id="getTotalStores">
        SELECT COUNT(*) FROM STORES
    </select>

    <!-- 이번 달과 저번 달 가입자 수 비교 -->
    <select id="getMonthlyStats">
        SELECT
            SUM(CASE WHEN TO_CHAR(CDATE, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM') THEN 1 ELSE 0 END) AS current_month_count,
            SUM(CASE WHEN TO_CHAR(CDATE, 'YYYY-MM') = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYY-MM') THEN 1 ELSE 0 END) AS previous_month_count
        FROM COMPANYS
    </select>

    
    <!-- 진행중 팝업 수 -->
      <select id="getPopuplistCount">
	SELECT
		COUNT(*)
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	    
	WHERE st.ban='N' AND st.status='승인' 
	      AND TRUNC(std.start_date) &lt;= TRUNC(SYSDATE) 
	      AND TRUNC(std.end_date) &gt;= TRUNC(SYSDATE)
	ORDER BY
	    st.store_idx ASC
  </select>
  
  <!-- 한달간 스토어 증가세 -->
      <select id="getMonthlyStatsByStores">
        SELECT
            SUM(CASE WHEN TO_CHAR(CDATE, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM') THEN 1 ELSE 0 END) AS current_month_count,
            SUM(CASE WHEN TO_CHAR(CDATE, 'YYYY-MM') = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYY-MM') THEN 1 ELSE 0 END) AS previous_month_count
        FROM STORES
    </select>
    
    <!-- 스토어상세추세 -->
     <select id="getStorePerformanceRank">
SELECT rank
FROM (
    SELECT
        RANK() OVER (ORDER BY (COUNT(SD.STORE_IDX) * 100 + NVL(SUM(SDD."LIKE"), 0)) DESC) AS rank,
        C.COMPANY_IDX
    FROM COMPANYS C
    LEFT JOIN STORES SD
        ON C.COMPANY_IDX = SD.COMPANY_IDX
    LEFT JOIN STORES_DETAIL SDD
        ON SD.STORE_IDX = SDD.STORE_IDX
    WHERE SD.CDATE BETWEEN TO_DATE(#{startDate}, 'YYYY-MM-DD') AND TO_DATE(#{endDate}, 'YYYY-MM-DD')
    GROUP BY C.COMPANY_IDX
) ranked_data
WHERE COMPANY_IDX = #{companyIdx}
    </select>
    
        <!-- 특정 날짜의 스토어 등록 수 가져오기 -->
    <select id="getStoreCountForDate">
        SELECT COUNT(*) 
        FROM STORES SD
        WHERE SD.COMPANY_IDX = #{companyIdx}
          AND TO_CHAR(SD.CDATE, 'YYYY-MM-DD') = #{formattedDate}
    </select>

    <!-- 특정 날짜의 좋아요 수 가져오기 -->
    <select id="getLikeCountForDate">
    SELECT NVL(SUM(SDD."LIKE"), 0) AS likeCount
    FROM STORES_DETAIL SDD
    LEFT JOIN STORES SD ON SD.STORE_IDX = SDD.STORE_IDX
    WHERE SD.COMPANY_IDX = #{companyIdx}
      AND TO_CHAR(SD.CDATE, 'YYYY-MM-DD') = #{formattedDate}
    </select>
    
   <select id="getallcompanyinfo">
SELECT 
    COMPANY_IDX,
    ID,
    PASSWORD,
    NAME,
    CODE,
    EMAIL,
    PHONE,
    COMPULSORY_AGREEMENT,
    INFO_AGREEMENT,
    MESSAGE_AGREEMENT,
    MARKETING_AGREEMENT,
    ALERT_AGREEMENT,
    STATUS,
    TO_CHAR(CDATE, 'YYYY-MM-DD') AS CDATE,
    ENABLED,
    ROLE,
    SOCIAL_ID,
    SOCIAL_TYPE
FROM COMPANYS
</select>
<select id="getPopupCountsByCompany"  resultType="map">
SELECT
    C.COMPANY_IDX,
    C.NAME AS COMPANY_NAME,
    COUNT(S.STORE_IDX) AS STORE_COUNT
FROM
    COMPANYS C
LEFT JOIN
    STORES S ON C.COMPANY_IDX = S.COMPANY_IDX
GROUP BY
    C.COMPANY_IDX, C.NAME
ORDER BY
    C.COMPANY_IDX
</select>


    <select id="getPopupManagerDetail" resultType="java.util.HashMap">
WITH FirstImages AS (
    SELECT 
        STORE_IDX,
        IMAGE_PATH,
        ROW_NUMBER() OVER (PARTITION BY STORE_IDX ORDER BY IS_IDX ASC) AS rn
    FROM 
        IMAGE_STORE
)
SELECT 
    S.STORE_IDX,
    C.COMPANY_IDX,
    C.NAME,
    S.CDATE,
    S.TITLE,
    S.AGE,
    S.BRAND1,
    S.BRAND2,
    S.CDATE,
    S.STATUS,
    S.BAN,
    FI.IMAGE_PATH
FROM 
    COMPANYS C 
LEFT JOIN 
    STORES S ON C.COMPANY_IDX = S.COMPANY_IDX
LEFT JOIN 
    FirstImages FI ON S.STORE_IDX = FI.STORE_IDX AND FI.rn = 1
LEFT JOIN 
    STORES_DETAIL SD ON S.STORE_IDX = SD.STORE_IDX
WHERE 
    SYSDATE BETWEEN SD.START_DATE AND SD.END_DATE
    AND S.BAN = 'C'
    </select>
    <select id="getPopupManagerDetailList">
    WITH FirstImages AS (
    SELECT 
        STORE_IDX,
        IMAGE_PATH,
        ROW_NUMBER() OVER (PARTITION BY STORE_IDX ORDER BY IS_IDX ASC) AS rn
    FROM 
        IMAGE_STORE
),
StoreCounts AS (
    SELECT 
        C.COMPANY_IDX,
        COUNT(S.STORE_IDX) AS STORE_COUNT
    FROM 
        COMPANYS C 
    LEFT JOIN 
        STORES S ON C.COMPANY_IDX = S.COMPANY_IDX
    LEFT JOIN 
        STORES_DETAIL SD ON S.STORE_IDX = SD.STORE_IDX
    WHERE 
        SYSDATE BETWEEN SD.START_DATE AND SD.END_DATE
    GROUP BY 
        C.COMPANY_IDX
)
SELECT 
    S.STORE_IDX,
    C.COMPANY_IDX,
    C.NAME,
    S.CDATE,
    S.TITLE,
    S.AGE,
    S.BRAND1,
    S.BRAND2,
    S.CDATE,
    S.STATUS AS STORE_STATUS,
    C.STATUS,
    S.BAN,
    FI.IMAGE_PATH,
    SC.STORE_COUNT
FROM 
    COMPANYS C 
LEFT JOIN 
    STORES S ON C.COMPANY_IDX = S.COMPANY_IDX
LEFT JOIN 
    FirstImages FI ON S.STORE_IDX = FI.STORE_IDX AND FI.rn = 1
LEFT JOIN 
    STORES_DETAIL SD ON S.STORE_IDX = SD.STORE_IDX
LEFT JOIN 
    StoreCounts SC ON C.COMPANY_IDX = SC.COMPANY_IDX
WHERE 
    SYSDATE BETWEEN SD.START_DATE AND SD.END_DATE
    </select>
    
    <update id="updateBanStatus">
    UPDATE STORES
    SET BAN = 'C'
    WHERE STORE_IDX = #{store_idx}
</update>
</mapper>

















