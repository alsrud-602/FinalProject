<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.users.mapper.PopcornMapper">  
  

<!-- 팝콘 지급/사용 내역 가져오기  -->
<select id="getLogByUserId" resultType="com.board.users.vo.PopcornVo">
SELECT 
    LOG_ID, 
    USER_ID, 
    CONTENT, 
    CONTENT_INFO, 
    EARNED_POINTS, 
    SPENT_POINTS,
    TOTAL_POINTS, 
    ADD_DATE
  FROM FINAL.POPCORN_LOG
  WHERE USER_ID = #{userId}
  ORDER BY ADD_DATE DESC
</select>

<!-- 팝콘 지갑 정보 가져오기  -->
<select id="checkWallet">
 SELECT*
  FROM FINAL.POPCORN_WALLET
  WHERE USER_ID = #{userId}
</select>

<!-- 출석 정보 가져오기  -->
<select id="getCheckAttend" >
    SELECT
    USER_ID,
    ATTENDANCE_STATUS,
    TO_CHAR(ATTENDANCE_DATE,'YYYY-MM-DD') AS ATTENDANCE_DATE,
    CONSECUTIVE_ATTENDANCE_DAYS,
    TOTAL_ATTENDANCE_DAYS
  FROM FINAL.ATTENDANCE
  WHERE USER_ID = #{userId}
</select>


<!-- 하루마다 출석상태 off 로 바꾸기  -->
<update id="updateAttendanceStatus">
    UPDATE ATTENDANCE
    SET
        ATTENDANCE_STATUS = 'OFF'
    WHERE
        USER_ID = #{userId}
</update>

<!-- 주마다 출석상태 off 로 바꾸기 , 연속출석일수 0으로 바꿔서 출석갱신 -->
<update id="updateNewWeekAttend">
    UPDATE ATTENDANCE
    SET
        ATTENDANCE_STATUS = 'OFF',
        CONSECUTIVE_ATTENDANCE_DAYS = 0
    WHERE
        USER_ID = #{userId}
</update>


<!-- 출석 하기 -->
<update id="AttendToUser">
    UPDATE ATTENDANCE
    SET
        ATTENDANCE_STATUS = 'ON',
        ATTENDANCE_DATE = SYSDATE,
        CONSECUTIVE_ATTENDANCE_DAYS = CONSECUTIVE_ATTENDANCE_DAYS + 1,
        TOTAL_ATTENDANCE_DAYS = TOTAL_ATTENDANCE_DAYS + 1
    WHERE
        USER_ID = #{userId}
</update>

<!-- 출석 포인트 추가 -->
<update id="addPointsToUser">
	UPDATE POPCORN_WALLET
SET
        TOTAL_POINTS = TOTAL_POINTS + #{arg1}
WHERE
        USER_ID = #{arg0}
</update>

<!--출석 포인트 내역 추가 -->
<insert id="addPopcornLog">
INSERT INTO POPCORN_LOG (
    LOG_ID,
    USER_ID,
    CONTENT,
    CONTENT_INFO,
    EARNED_POINTS,
    TOTAL_POINTS,
    ADD_DATE
) VALUES (
    (SELECT NVL(MAX(LOG_ID),0)+1 FROM POPCORN_LOG),  
    #{arg0},
    '출석체크',
    '지급',
    #{arg1},
    (SELECT TOTAL_POINTS + #{arg1} FROM POPCORN_WALLET WHERE USER_ID = #{arg0}),  
    SYSDATE
)
</insert>


<!--                 회원가입                         -->

<!-- 회원가입시 지갑생성 최초 가입1000 -->
<insert id="createPopcornWallet" >
INSERT INTO POPCORN_WALLET (
    USER_ID,
    TOTAL_POINTS
) VALUES (
    #{id},
    1000
)
</insert>

<!-- 회원가입시 출석생성 -->
<insert id="createUserAttendance" >
INSERT INTO ATTENDANCE (
    USER_ID
) VALUES (
	#{id}
)
</insert>

<!-- 회원가입시 팝콘 내역 생성 최초 가입1000 -->
<insert id="createPopcornLog" >
INSERT INTO POPCORN_LOG (
    LOG_ID,
    USER_ID,
    CONTENT,
    CONTENT_INFO,
    EARNED_POINTS,
    TOTAL_POINTS,
    ADD_DATE
) VALUES (
    (SELECT NVL(MAX(LOG_ID),0)+1 FROM POPCORN_LOG),  
    #{id},
    '최초 가입',
    '지급',
    1000,
    (SELECT TOTAL_POINTS FROM POPCORN_WALLET WHERE USER_ID = #{id}),
    SYSDATE
)
</insert>

<!-- 안만들어진 유저들 변수차단 -->
<insert id="newuserWallet" >
INSERT INTO POPCORN_WALLET (
    USER_ID,
    TOTAL_POINTS
) VALUES (
    #{useruserid},
    1000
)
</insert>

<!-- 회원가입시 출석생성 -->
<insert id="newuserAttend" >
INSERT INTO ATTENDANCE (
    USER_ID
) VALUES (
	#{useruserid}
)
</insert>

<!-- 회원가입시 팝콘 내역 생성 최초 가입1000 -->
<insert id="newuserLog" >
INSERT INTO POPCORN_LOG (
    LOG_ID,
    USER_ID,
    CONTENT,
    CONTENT_INFO,
    EARNED_POINTS,
    TOTAL_POINTS,
    ADD_DATE
) VALUES (
    (SELECT NVL(MAX(LOG_ID),0)+1 FROM POPCORN_LOG),  
    #{useruserid},
    '최초 가입',
    '지급',
    1000,
    (SELECT TOTAL_POINTS FROM POPCORN_WALLET WHERE USER_ID = #{useruserid}),
    SYSDATE
)
</insert>
<!--                 회원가입완료                         -->


</mapper>



