<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.users.mapper.UsersMapper">
   
   <!-- 진행중 팝업 리스트 -->
  <select id="getPopuplist">
	SELECT
	    st.store_idx, st.company_idx,st.title,st.age,st.brand1,st.brand2,st.cdate,st.status,st.ban,
	    std.detail_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction,std.content,std.parking,std.fare,std.age_limit, std.shooting,std.igdate,
	    std."LIKE", std.goods
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE st.ban='N' AND st.status='승인' 
	      AND std.start_date &lt; SYSDATE 
	      AND std.end_date &gt; SYSDATE
	ORDER BY
	    st.store_idx ASC
  </select>
   
   <!-- 랭킹 팝업 리스트 -->
   <select id="getRanklist">
   SELECT
	    st.store_idx, st.company_idx, st.title, st.age, st.brand1, st.brand2,
	    st.cdate, st.status, st.ban, std.detail_idx, std.address,
	    TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,
	    TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction, std.content,
	    std.parking, std.fare, std.age_limit, std.shooting, std.igdate,
	    std."LIKE", std.goods,
	    COUNT(h.user_id) AS user_count 
	FROM
	    stores st
	JOIN stores_detail std ON st.store_idx = std.store_idx
	LEFT JOIN HIT h ON st.store_idx = h.store_idx 
	WHERE 
	    st.ban = 'N' AND 
	    st.status = '승인' AND
	    h.cdate >= TRUNC(SYSDATE) - 7 AND  
	    st.store_idx IN (
	        SELECT STORE_IDX
	        FROM (
	            SELECT STORE_IDX, COUNT(user_id) AS user_count
	            FROM HIT
	            WHERE cdate &gt;= TRUNC(SYSDATE) - 7 
	            GROUP BY STORE_IDX
	            ORDER BY user_count DESC
	        )
	        WHERE ROWNUM &lt;= 7
	    )
	GROUP BY
	    st.store_idx, st.company_idx, st.title, st.age, st.brand1, st.brand2,
	    st.cdate, st.status, st.ban, std.detail_idx, std.address,
	    std.start_date, std.end_date, std.homepage, std.sns,
	    std.introduction, std.content, std.parking, std.fare,
	    std.age_limit, std.shooting, std.igdate, std."LIKE", std.goods
	ORDER BY
	    COUNT(h.user_id) DESC
   </select>
   
   <select id="getRankdetaillist">
   SELECT
	    st.store_idx, st.company_idx, st.title, st.age, st.brand1, st.brand2,
	    st.cdate, st.status, st.ban, std.detail_idx, std.address,
	    TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,
	    TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction, std.content,
	    std.parking, std.fare, std.age_limit, std.shooting, std.igdate,
	    std."LIKE", std.goods,
	    COUNT(h.user_id) AS user_count
	FROM
	    stores st
	JOIN stores_detail std ON st.store_idx = std.store_idx
	LEFT JOIN HIT h ON st.store_idx = h.store_idx 
	WHERE 
	    st.ban = 'N' AND 
	    st.status = '승인' AND
	    st.store_idx IN (
	        SELECT STORE_IDX
	        FROM (
	            SELECT STORE_IDX, COUNT(user_id) AS user_count
	            FROM HIT
	            GROUP BY STORE_IDX
	            ORDER BY user_count DESC
	        )
	        WHERE ROWNUM &lt; = 10
	    )
	GROUP BY
	    st.store_idx, st.company_idx, st.title, st.age, st.brand1, st.brand2,
	    st.cdate, st.status, st.ban, std.detail_idx, std.address,
	    std.start_date, std.end_date, std.homepage, std.sns,
	    std.introduction, std.content, std.parking, std.fare,
	    std.age_limit, std.shooting, std.igdate, std."LIKE", std.goods
	ORDER BY
	    COUNT(h.user_id) DESC
   </select>
   
   <!-- 조회수 전체 조회 -->
   <select id="getSelectStoreHit">
   SELECT
	    store_idx,
	    user_id
	FROM
	    hit
	WHERE store_idx=#{store_idx}
	AND   user_id = #{username}
	</select>
   <!-- 랭킹 조회수 증가 -->
   <insert id="insertStoreHit">
   INSERT INTO hit (store_idx,user_id) 
	VALUES (#{store_idx},#{username})
   </insert>
   
   <!-- 오픈예정 팝업 리스트 -->
  <select id="getOpendpopuplist">
   SELECT
	    st.store_idx, st.company_idx,st.title,st.age,st.brand1,st.brand2,st.cdate,st.status,st.ban,
	    std.detail_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction,std.content,std.parking,std.fare,std.age_limit, std.shooting,std.igdate,
	    std."LIKE", std.goods
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE st.ban='N' AND st.status='승인' 
	AND std.start_date > SYSDATE AND std.end_date > SYSDATE
	ORDER BY
	    st.store_idx ASC
  </select>
  
  <!-- 종료된 팝업 리스트 -->
  <select id="getclosepopuplist">
  SELECT
	    st.store_idx, st.company_idx,st.title,st.age,st.brand1,st.brand2,st.cdate,st.status,st.ban,
	    std.detail_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction,std.content,std.parking,std.fare,std.age_limit, std.shooting,std.igdate,
	    std."LIKE", std.goods
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE st.ban='N' AND st.status='승인' 
	AND std.start_date &lt; SYSDATE AND std.end_date &lt; SYSDATE
	ORDER BY
	    st.store_idx ASC
  </select>
  

  <!-- 메인화면 필터링 -->
  <select id="getFilterlist">
  SELECT
	    st.store_idx, st.company_idx,st.title,st.age,st.brand1,st.brand2,st.cdate,st.status,st.ban,
	    std.detail_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction,std.content,std.parking,std.fare,std.age_limit, std.shooting,std.igdate,
	    std."LIKE", std.goods
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE
    1=1
	    AND st.ban = 'N'
	    AND st.status = '승인'
	    AND std.start_date &lt; SYSDATE
	    AND std.end_date &gt; SYSDATE
	    <if test="region != null and region != ''">
	        AND std.address LIKE '%' || #{region} || '%'
	    </if>
	    <if test="age != null and age !=''">
	        AND st.age=#{age}
	    </if>
	    <if test="date != null and date !=''">
	        AND #{date} BETWEEN start_date AND end_date
	    </if>
	    
	ORDER BY
	    st.store_idx ASC
  </select>
  
  <!-- 검색 후 화면 리스트 -->
  <!-- 진행중 -->
  <select id="getOngoingsearchlist">
  SELECT
	    st.store_idx, st.company_idx,st.title,st.age,st.brand1,st.brand2,st.cdate,st.status,st.ban,
	    std.detail_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction,std.content,std.parking,std.fare,std.age_limit, std.shooting,std.igdate,
	    std."LIKE", std.goods
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE 1=1
	      AND st.ban='N' AND st.status='승인' 
	      AND std.start_date &lt; SYSDATE 
	      AND std.end_date &gt; SYSDATE
	      <if test="search != null and search != ''">
	        AND st.title LIKE '%' || #{search} || '%'
	    </if>
	ORDER BY
	    st.store_idx ASC
  </select>
  
  
  <!-- 종료 -->
  <select id="getClosesearchlist">
  SELECT
	    st.store_idx, st.company_idx,st.title,st.age,st.brand1,st.brand2,st.cdate,st.status,st.ban,
	    std.detail_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction,std.content,std.parking,std.fare,std.age_limit, std.shooting,std.igdate,
	    std."LIKE", std.goods
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE 1=1 
	     AND st.ban='N' AND st.status='승인' 
	     AND std.start_date &lt; SYSDATE AND std.end_date &lt; SYSDATE
	     <if test="search != null and search != ''">
	        AND st.title LIKE '%' || #{search} || '%'
	    </if>
	ORDER BY
	    st.store_idx ASC
  </select>
  
  
  <!-- 상세페이지 -->
  <!-- 스토어 상세 정보 -->
  <select id="getStoredetail">
  SELECT
	    st.store_idx,st.company_idx, st.title, st.age, st.brand1, st.brand2, st.cdate, st.status,  st.ban,
	    std.detail_idx, std.store_idx, std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date, TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date, std.homepage, std.sns, std.introduction, 
	    std.content, std.parking, std.fare, std.age_limit, std.shooting, std."LIKE", std.goods,std.igdate
	
	FROM
	    stores st,stores_detail std
	WHERE st.store_idx = std.store_idx
	AND   st.store_idx = #{store_idx}
  </select>
  
  <!-- 스토어 태그 -->
  <select id="getStoretag">
  SELECT
	    tage_idx, store_idx,tag_name
	FROM
	    stores_tag
	WHERE store_idx = #{store_idx}
  </select>
 
  <!-- 스토어 예약 구분 -->
  <select id="getStoreReservation">
  SELECT rs_idx, store_idx, notes,
	    open_date, status, link
	FROM
	    reservation_stores
	WHERE store_idx = #{store_idx}
  </select>
  
  <!-- 스토어 운영시간 -->
  <select id="getStoreOperation">
  SELECT
	    so.operation_idx,
	    so.store_idx,
	    TO_CHAR(smon,'HH24:MI') AS smon,
	    TO_CHAR(emon,'HH24:MI') AS emon,
	    TO_CHAR(stue,'HH24:MI') AS stue,
	    TO_CHAR(etue,'HH24:MI') AS etue,
	    TO_CHAR(swed,'HH24:MI') AS swed,
	    TO_CHAR(ewed,'HH24:MI') AS ewed,
	    TO_CHAR(sthu,'HH24:MI') AS sthu,
	    TO_CHAR(ethu,'HH24:MI') AS ethu,
	    TO_CHAR(sfri,'HH24:MI') AS sfri,
	    TO_CHAR(efri,'HH24:MI') AS efri,
	    TO_CHAR(ssat,'HH24:MI') AS ssat,
	    TO_CHAR(esat,'HH24:MI') AS esat,
	    TO_CHAR(ssun,'HH24:MI') AS ssun,
	    TO_CHAR(esun,'HH24:MI') AS esun,
	    so.onotes,
	    std.detail_idx,std.store_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date, TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,std.homepage,
	    std.sns, std.introduction, std.content, std.parking, std.fare, std.age_limit, std.shooting,
	    std."LIKE", std.goods, std.igdate  
	FROM
	    stores_operation so JOIN stores_detail std ON so.store_idx = std.store_idx
	WHERE so.store_idx = #{store_idx}
  </select>
  
  <select id="getStoreCategory">
  SELECT
	    c.category_idx,
	    c.category_name,
	    sc.category_id
	FROM
	    stores_category sc
	JOIN
	    category c ON sc.category_id = c.category_id
	WHERE
	    sc.store_idx = #{store_idx}
  </select>
  
  <!-- 메인 검색 페이징 -->
  <!-- 진행중 -->
  <select id="getOngoingcount">
  SELECT
	    COUNT(*)  AS CNT
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE 
	      st.ban='N' AND st.status='승인' 
	      AND std.start_date &lt; SYSDATE 
	      AND std.end_date &gt; SYSDATE
	ORDER BY
	    st.store_idx ASC
  </select>
  
  <select id="getPopuppaginglist">
  SELECT
	    st.store_idx, st.company_idx,st.title,st.age,st.brand1,st.brand2,st.cdate,st.status,st.ban,
	    std.detail_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction,std.content,std.parking,std.fare,std.age_limit, std.shooting,std.igdate,
	    std."LIKE", std.goods
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE st.ban='N' AND st.status='승인' 
	      AND std.start_date &lt; SYSDATE 
	      AND std.end_date &gt; SYSDATE
	ORDER BY
	    st.store_idx ASC
	OFFSET #{start} ROWS FETCH NEXT #{size} ROWS ONLY    
  </select>
  
  <!-- 검색 페이징 -->
  <select id="getOngoingsearchcount">
  SELECT
	    COUNT(*)  AS CNT
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE 1=1 
	      AND st.ban='N' AND st.status='승인' 
	      AND std.start_date > SYSDATE AND std.end_date > SYSDATE
	      <if test="search != null and search != ''">
	        AND st.title LIKE '%' || #{search} || '%'
	    </if>
	      ORDER BY
	          st.store_idx ASC
  </select>
  
  <!-- 오픈예정 -->
  <select id="getOpendsearchlist">
  SELECT
	    st.store_idx, st.company_idx,st.title,st.age,st.brand1,st.brand2,st.cdate,st.status,st.ban,
	    std.detail_idx,std.address,TO_CHAR(std.start_date, 'YYYY-MM-DD') AS start_date,TO_CHAR(std.end_date, 'YYYY-MM-DD') AS end_date,
	    std.homepage, std.sns, std.introduction,std.content,std.parking,std.fare,std.age_limit, std.shooting,std.igdate,
	    std."LIKE", std.goods
	FROM
	    stores st JOIN stores_detail std ON st.store_idx = std.store_idx
	WHERE 1=1 
	      AND st.ban='N' AND st.status='승인' 
	      AND std.start_date > SYSDATE AND std.end_date > SYSDATE
	      <if test="search != null and search != ''">
	        AND st.title LIKE '%' || #{search} || '%'
	    </if>
	      ORDER BY
	          st.store_idx ASC
	 OFFSET #{start} ROWS FETCH NEXT #{size} ROWS ONLY 
  </select>

  <!-- 조회수 조회 -->
  <select id="getStoreHit">
    SELECT STORE_IDX, COUNT(user_id) AS hit
	FROM HIT
	WHERE store_idx = #{store_idx}
	GROUP BY STORE_IDX
  </select>  
  
  <!-- 좋아요 조회 -->
  <select id="getStoreLike">
  SELECT store_idx, COUNT(user_idx) AS storelike
	FROM like_stores
	WHERE store_idx = #{store_idx}
	GROUP BY store_idx
  </select>
  
  <!-- 전체 리뷰 조회 -->
  <select id="gettotalreviews">
  SELECT
	    us.name,  us.user_idx,
	    re.review_idx, re.user_idx, re.store_idx,re.score,
	    re.content,re."LIKE",re.hit,
	    TO_CHAR(re.cdate, 'YYYY-MM-DD') AS review_date  
	FROM
	    reviews re 
	JOIN 
	    users us ON re.user_idx = us.user_idx 
	WHERE 
	    re.store_idx = #{store_idx}
  </select>
  
  <!-- 전체 리뷰,평점 계산 -->
  <select id="getotalcount">
  SELECT
	    count(review_idx) as review_idx ,avg(score) as score
	FROM
	    reviews
	WHERE store_idx=#{store_idx}
  </select>
  
  <!-- 핫리뷰 조회순(3개) -->
  <select id="getHotReviews">
  SELECT
    us.name,us.user_idx,
    re.review_idx, re.store_idx, re.score, 
    re.content, re."LIKE", re.hit, TO_CHAR(re.cdate, 'YYYY-MM-DD') AS review_cdate
FROM
    users us
JOIN (
    SELECT *
    FROM (
        SELECT
            review_idx, user_idx, store_idx, score, content,
            "LIKE", hit, cdate
        FROM
            reviews
        WHERE
            store_idx = #{store_idx}
        ORDER BY
            hit DESC
    )
    WHERE ROWNUM &lt;= 3
) re ON us.user_idx = re.user_idx
  </select>
  
  <!-- 리뷰 상세 페이지 -->
  <select id="getReviewDetail">
  SELECT
	    us.name,  us.user_idx,
	    re.review_idx, re.user_idx, re.store_idx,re.score,
	    re.content,re."LIKE",re.hit,
	    TO_CHAR(re.cdate, 'YYYY-MM-DD') AS review_date  
	FROM
	    reviews re 
	JOIN 
	    users us ON re.user_idx = us.user_idx 
	WHERE 
	    re.store_idx = #{storeidx}
	AND us.user_idx = #{useridx}
  </select>
</mapper>